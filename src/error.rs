use chrono::Duration;
use smartstring::{LazyCompact, SmartString};
type String = SmartString<LazyCompact>;
use crate::ALL_TAGS;

#[derive(thiserror::Error, Debug)]
pub enum Error {
    #[error("–ù–µ —É–∫–∞–∑–∞–Ω—ã —Ä–µ–≥–∏–æ–Ω—ã üó∫‚ùå")]
    NoRegions,

    #[error("–ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å üïí‚ùå")]
    DurationParseError(#[from] std::num::ParseIntError),

    #[error("‚ö†Ô∏è‚ÄºÔ∏è –ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω ‚ÄºÔ∏è‚ö†Ô∏è\n\"{region}\".\n–°–æ–≤–ø–∞–¥–µ–Ω–∏—è: {matches:?}")]
    BadRegion {
        region: String,
        matches: Vec<&'static str>,
    },

    #[error("–ü–æ —Ç–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π üîé‚ùå")]
    NoMessages {
        regions: Vec<String>,
        duration: Duration,
        tags: Vec<String>,
    },

    #[error("‚ö†Ô∏è‚ÄºÔ∏è –ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Ç–µ–≥ ‚ÄºÔ∏è‚ö†Ô∏è\n\"{0}\". –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–µ–≥–∏: [ {} ]", 
        ALL_TAGS
            .read()
            .map_err(|e| log::error!("Can't lock ALL_TAGS. Error: {}", e.to_string()))
            .unwrap()
            .iter()
            .copied()
            .collect::<Vec<_>>()
            .join(", "))]
    BadTag(String),

    #[error("‚ö†Ô∏è‚ÄºÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–µ—Ä–Ω—É–ª–∞ –æ—à–∏–±–∫—É ‚ÄºÔ∏è‚ö†Ô∏è üßë‚Äçüíª\n{0}")]
    DbError(#[from] crate::db_utils::error::Error),
}
